group 'io.fls.blogapp.frontend'

buildscript {
    ext.outputName = "blogapp-${project.name}"

    repositories {
        mavenCentral()
        jcenter()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'base'
apply plugin: 'com.moowork.node' // gradle-node-plugin

node {
    // Version of node to use.
    version = '10.16.3'
    // Version of npm to use.
    npmVersion = '6.4.1'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
}

npm_run_build {
    inputs.files fileTree("public")
    inputs.files fileTree("src")

    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    outputs.dir 'build'
}

// pack output of the build into JAR file
task packageNpmApp(type: Zip) {
    dependsOn npm_run_build
    baseName "${outputName}"
    extension 'jar'
    destinationDir file("${projectDir}/build_${outputName}")
    from('build') {
        // optional path under which output will be visible in Java classpath, e.g. static resources path
        into 'static'
    }
}

// declare a dedicated scope for publishing the packaged JAR
configurations {
    npmResources
}

configurations.default.extendsFrom(configurations.npmResources)

// expose the artifact created by the packaging task
artifacts {
    npmResources(packageNpmApp.archivePath) {
        builtBy packageNpmApp
        type 'jar'
    }
}
configurations.default.extendsFrom(configurations.npmResources)

assemble.dependsOn packageNpmApp

String testsExecutedMarkerName = "${projectDir}/.tests.executed"

task test(type: NpmTask) {
    dependsOn assemble

    // force Jest test runner to execute tests once and finish the process instead of starting watch mode
    environment CI: 'true'

    args = ['run', 'test']

    inputs.files fileTree('src')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    // allows easy triggering re-tests
    doLast {
        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
    }
    outputs.file testsExecutedMarkerName
}

check.dependsOn test

clean {
    delete packageNpmApp.archivePath
    delete testsExecutedMarkerName
}